#!/usr/bin/env python3

# Author: Matthew Zito (goldmund) 
# Contact: https://www.github.com/MatthewZito
# Version: 0.2.0

import subprocess
import argparse
import re
import random

MAC_REGEX = r"\w\w:\w\w:\w\w:\w\w:\w\w:\w\w"

def elicit_arguments():
    """
    Fetches arguments interface and desired MAC address from user.
    """
    parser = argparse.ArgumentParser(description="Change the 48-bit MAC address of a given device.")
    parser.add_argument("-i","--interface", dest="interface", help="the name of a wireless interface")
    parser.add_argument("-m","--mac", dest="new_mac", help="new MAC address")
    parser.add_argument("-r","--auto", action='store_true', help="generate a random MAC address")
    parser.add_argument("--oui", help="enforce a specific organizationally unique identifier (e.g. 00:60:2f for Cisco)")
    parser.add_argument("--uaa", action='store_true', help="generates a universally administered address (default is LAA)")
    parser.add_argument("--multi", action='store_true', help="generates a multicast MAC (default is unicast)")

    args = parser.parse_args()
    if (not args.interface):
        parser.error("[-] Interface not specified. Use --help for usage instructions." )
    return args

def get_current_mac(interface):
    """
    Calls ifconfig, runs a regex to find the specified device's (interface)
    current MAC address, and returns it as a string. 
    """
    ifconfig_res = subprocess.check_output(["ifconfig", interface])
    # decode what is a bytes-like object
    decoded_res = ifconfig_res.decode("utf-8")
    current_mac_res = re.search(MAC_REGEX, decoded_res)
    # does the device even have a MAC address?
    if (current_mac_res == None):
        return None
    else:
        return current_mac_res.group(0)

def change_mac_address(interface, new_mac):
    """
    Uses ifconfig to reassign a given device's MAC address.
    """
    print(f"[+] Changing MAC address for interface {interface} to {new_mac}.")
    subprocess.call(["ifconfig", interface, "down"])
    subprocess.call(["ifconfig", interface, "hw", "ether", new_mac])
    subprocess.call(["ifconfig", interface, "up"])

def validate_new_mac_persistence(interface, new_mac):
    """
    Validates a given device's current MAC against the new MAC
    specified by the user (new_mac) to ensure new MAC persists
    and is valid.
    """
    current_mac = get_current_mac(interface)
    if (current_mac == new_mac):
        print(f"[+] Successfully updated device {interface} MAC address to {new_mac}.")
    else:
        print(f"[-] Failed to update/persist to specified MAC address {new_mac} for device {interface}")

def validate_new_mac_format(new_mac):
    """
    A basic check to validate the user-input for new MAC address 
    by ensuring it follows the proper colon-delimited format.
    """
    valid_mac_res = re.search(MAC_REGEX, new_mac)
    return True if valid_mac_res != None else False


def generate_bytes(num=6):
    return [random.randrange(256) for _ in range(num)]

def generate_mac(oui=False, multicast=False, uaa=None):
    """
    Generates a MAC address either:
    (a) entirely (defaults unicast, LAA),
    (b) with a specified vendor prefix (OUI),
    (c) with multicast and/or UAA IEEE specifications
    """
    delimiter = ":"
    # begin Philipp Klaus' code, which I've augmented 
    # https://gist.github.com/pklaus/9638536#file-randmac-py-L10-L22
    byte_mac = generate_bytes()
    if (oui and type(oui) == str):
        try:
            # convert to bytes
            byte_oui = [int(chunk, 16) for chunk in oui.split(delimiter)]
            byte_mac = byte_oui + generate_bytes(num=6 - len(byte_oui))
        except ValueError as stderr:
            print(f"[-] OUI format is invalid. See: {stderr}")
    else:
        if (multicast):
            byte_mac[0] |= 1 # set bit 0
        else: # unicast
            byte_mac[0] &= ~1 # clear bit 0
        if (uaa):
            byte_mac[0] &= ~(1 << 1) # clear bit 1
        else: # laa
            byte_mac[0] |= 1 << 1 # set bit 1
    # end Philipp Klaus' code
    random_mac = delimiter.join(map(lambda x: "%02x" % x, byte_mac))
    return random_mac

def main():
    user_args = elicit_arguments()
    interface = user_args.interface
    new_mac = None
    if (get_current_mac(interface) != None):
        if (not user_args.new_mac):
            if (user_args.auto):
                new_mac = generate_mac(oui=user_args.oui, uaa=user_args.uaa, multicast=user_args.multi)
                print(new_mac)
            else:
                print("[-] MAC address not specified. Use --help for usage instructions.")
        elif (validate_new_mac_format(user_args.new_mac)):
                new_mac = user_args.new_mac
        else:
            print(f"[-] Invalid MAC address format: {user_args.new_mac}")
        
        if (new_mac != None):
            print(f"[+] Current MAC for device {interface}: {str(get_current_mac(interface))}")
            change_mac_address(interface, new_mac)
            validate_new_mac_persistence(interface, new_mac)
    else:
        print(f"[-] Unable to read MAC address of device {interface}.")
        
if (__name__ == "__main__"):
    try:
        main()
    except Exception as stderr:
        print(f"[-] An error has occurred. See:{stderr}")
    

####################### TMP DEVELOPMENT NOTES ###########################
""" 
TODO: Add option to enumerate all connected, eligible devices, selectable by ID.
I'll probably use inquirer for this.

TODO: Fix output for devices with no MAC (erroneously passes two conditions)

Other algos for random generation were:

mac_identifier = "00:" + delimiter.join('%02x'%random.randrange(256) for _ in range(5))

':'.join(("%012x" % random.randint(0, 0xFFFFFFFFFFFF))[i:i+2] for i in range(0, 12, 2))

core = [
        0x00, 0x16, 0x3e, 
        random.randint(0x00, 0x7f), 
        random.randint(0x00, 0xff),
        random.randint(0x00, 0xff)
        ]
delimiter.join(map(lambda x: "%02x" % x, core))

Most of these methods are faster than that which is implemented. However, I have opted for 
clarity over performance for myriad reasons. Given what the program does, it runs fast enough.

Research: 
https://en.wikipedia.org/wiki/Organizationally_unique_identifier#Bit-reversed_representation
https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/5/html/virtualization/sect-virtualization-tips_and_tricks-generating_a_new_unique_mac_address
"""