#!/usr/bin/env python

# Author: Matthew Zito (goldmund) 
# Contact: https://www.github.com/MatthewZito
# Version: 0.1.0

"""
This scanner discovers all clients on a given network by way of 
a custom algorithm that follows as such:
i) generate ARP request directed to broadcast MAC asking for IP,
ii) send packet and receive response
iii) parse response
iv) stdout result(s)
"""

import scapy.all as scapy
import argparse
import ipaddress

def validate_input(ip_range_input):
    """
    Accepts as input a valid ipv4 or ipv6 IP address with optional subnet range.
    Validates given IP and range, raises an exception if IP/range is invalid.
    """
    ip_arr = ip_range_input.split("/")
    if (len(ip_arr) == 2):
        ip_range = ip_arr[1]
        # validate ip_range
    ip_address = ip_arr[0]
    try:
        ip = (u"{ip}").format(ip=ip_address)
        ipaddress.ip_address(ip)
        return True
    except ValueError as stderr:
        return stderr

def elicit_arguments():
    """
    Fetches argument target IP address and range from user..
    """
    parser = argparse.ArgumentParser(description="Scan a given network range for all connected clients' IP and MAC addresses.")
    parser.add_argument("-r","--range", dest="ip_range", help="the IP range to scan")
    args = parser.parse_args() 
    if (not args):
        parser.error("[-] IP range not specified. Use --help for usage instructions." )
    return args

def scan(ip_address):
    """
    Accepts as input an IP range and generates a broadcast object comprised of an 
    ARP request and ethernet frame. Sends the packet with a custom ether and elicits 
    all known IPs and associated MAC addresses, returned as a list.
    """
    # generate packet
    arp_request = scapy.ARP(pdst=ip_address)
    # generate ethernet frame for dest MAC address
    broadcast = scapy.Ether(dst="ff:ff:ff:ff:ff:ff")
    # render broadcast obj
    arp_request_broadcast = broadcast/arp_request
    # send packet w/custom ether (srp vs sr)
    acknowledged_list = scapy.srp(arp_request_broadcast, timeout=1, verbose=False)[0]
    return acknowledged_list

    # unacknowledged_list = scapy.srp(arp_request_broadcast, timeout=1)[1]

def parse_results(acknowledged_list):
    """
    Accepts as input a list of ARP request acknowledgements, which are indexed into a
    dict with keys "IP" and "MAC". The dict is appended to the clients_list, which
    is returned. 
    """
    clients_list = []
    for transaction in acknowledged_list:
        client_dict = { "ip": transaction[1].psrc, "mac": transaction[1].hwsrc }
        clients_list.append(client_dict)
    return clients_list

def format_output(clients_list):
    """
    Loops over given clients list and outputs a formatted table mapping IPs to MACs.
    """
    print("\nIP\t\t|\tMAC Address\n-----------------------------------------")
    for client in clients_list:
        print("{ip}\t\t{mac}").format(ip=client["ip"],mac=client["mac"])


def main():
    user_args = elicit_arguments()
    ip_range_input = user_args.ip_range
    if (validate_input(ip_range_input) != True):
        print("[-] Invalid IP address format. See: {e}").format(e=validate_input(ip_range_input))
    else:
        clients = scan(ip_range_input)
        res_obj = parse_results(clients)
        format_output(res_obj)
    
if __name__ == "__main__":
    main()

