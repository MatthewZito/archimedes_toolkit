#!/usr/bin/env python3

import subprocess
import argparse
import re
import random

MAC_REGEX = r"\w\w:\w\w:\w\w:\w\w:\w\w:\w\w"

def elicit_arguments():
    """
    Fetches arguments interface and desired MAC address from user.
    """
    parser = argparse.ArgumentParser(description="Change the MAC address of a given device.")
    parser.add_argument("-i","--interface", dest="interface", help="the name of a wireless interface")
    parser.add_argument("-m","--mac", dest="new_mac", help="new MAC address")
    parser.add_argument("-r","--auto", action='store_true', help="random MAC address")
    args = parser.parse_args()
    if (not args.interface):
        parser.error("[-] Interface not specified. Use --help for usage instructions." )
    return args

def get_current_mac(interface):
    """
    Calls ifconfig, runs a regex to find the specified device's (interface)
    current MAC address, and returns it as a string. 
    """
    ifconfig_res = subprocess.check_output(["ifconfig", interface])
    # decode what is a bytes-like object
    decoded_res = ifconfig_res.decode("utf-8")
    current_mac_res = re.search(MAC_REGEX, decoded_res)
    # does the device even have a MAC address?
    if (current_mac_res == None):
        return None
    else:
        return current_mac_res.group(0)

def change_mac_address(interface, new_mac):
    """
    Uses ifconfig to reassign a given device's MAC address.
    """
    print(f"[+] Changing MAC address for interface {interface} to {new_mac}.")
    subprocess.call(["ifconfig", interface, "down"])
    subprocess.call(["ifconfig", interface, "hw", "ether", new_mac])
    subprocess.call(["ifconfig", interface, "up"])

def validate_new_mac_persistence(interface, new_mac):
    """
    Validates a given device's current MAC against the new MAC
    specified by the user (new_mac) to ensure new MAC persists
    and is valid.
    """
    current_mac = get_current_mac(interface)
    if (current_mac == new_mac):
        print(f"[+] Successfully updated device {interface} MAC address to {new_mac}.")
    else:
        print(f"[-] Failed to update/persist to specified MAC address {new_mac} for device {interface}")

def validate_new_mac_format(new_mac):
    """
    A basic check to validate the user-input for new MAC address 
    by ensuring it follows the proper colon-delimited format.
    """
    valid_mac_res = re.search(MAC_REGEX, new_mac)
    return True if valid_mac_res != None else False

def random_mac_gen():
    delimiter = ":"
    core = [
        0x00, 0x16, 0x3e, 
        random.randint(0x00, 0x7f), 
        random.randint(0x00, 0xff),
        random.randint(0x00, 0xff)
        ]
    random_mac = delimiter.join(map(lambda x: "%02x" % x, core))
    return random_mac

def main():
    user_args = elicit_arguments()
    interface = user_args.interface
    new_mac = None
    if (get_current_mac(interface) != None):
        if (not user_args.new_mac):
            if (user_args.auto):
                new_mac = random_mac_gen()
            else:
                print("[-] MAC address not specified. Use --help for usage instructions.")
        elif (validate_new_mac_format(user_args.new_mac)):
                new_mac = user_args.new_mac
        else:
            print(f"[-] Invalid MAC address format: {user_args.new_mac}")
        
        if (new_mac != None):
            print(f"[+] Current MAC for device {interface}: {str(get_current_mac(interface))}")
            change_mac_address(interface, new_mac)
            validate_new_mac_persistence(interface, new_mac)
    else:
        print(f"[-] Unable to read MAC address of device {interface}.")
        
if (__name__ == "__main__"):
    main()

"""
Written by Matthew Zito (goldmund) 
github.com/MatthewZito
"""

""" 
TODO: Add a "scramble" option, which enables the user to scramble the MAC to an algorithmically
generated and *valid* address. This will be useful for changing the MAC of a given device for privacy
purposes, and not necessarily spoofing, which would necessitate a user-provided, specific MAC address
argument (as is presently the case).

TODO: Add option to enumerate all connected, eligible devices, selectable by ID.
I'll probably use inquirer for this.

TODO: Fix output for devices with no MAC (erroneously passes two conditions)
"""